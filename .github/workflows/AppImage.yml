name: Gnucash AppImage Build Synced with upstream Gnucash releases
on:
  #schedule:
  #  # cron format = hour (0-59) / hour (0-23) / days (1-31) / month (1-12) / week day (0-6 / sunday-saturday)
  #  # Here = check for new release every day at 3:00am.
  #  - cron: '0 3 * * *'
  workflow_dispatch:
    # To allaw manual trigger
    inputs:
      external_tag:
        description: 'Gnucash release tag to synchronize'
        required: false

jobs:
  build:
    #runs-on: ubuntu-20.04
    runs-on: ubuntu-22.04
  
    steps:
      # Checks-out this repository under $GITHUB_WORKSPACE, so this job can access it
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          #Get full history, with all existing tags
          fetch-depth: 0

      - name: Get latest release from Gnucash repo
        id: external_release
        run: |
          EXTERNAL_REPO="gnucash/gnucash"
          
          LATEST_RELEASE=$(curl -s "https://api.github.com/repos/$EXTERNAL_REPO/releases/latest")
          EXTERNAL_TAG=$(echo "$LATEST_RELEASE" | jq -r '.tag_name')
          EXTERNAL_NAME=$(echo "$LATEST_RELEASE" | jq -r '.name')
          EXTERNAL_BODY=$(echo "$LATEST_RELEASE" | jq -r '.body')
          
          echo "tag=$EXTERNAL_TAG" >> $GITHUB_OUTPUT
          echo "name=$EXTERNAL_NAME" >> $GITHUB_OUTPUT
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$EXTERNAL_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check if release already exists
        id: check_release
        run: |
          TAG="${{ steps.external_release.outputs.tag }}"
          
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release $TAG exists in this repo"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release $TAG does not exist in this repo"
          fi

      - name: Create new tag
        if: steps.check_release.outputs.exists == 'false'
        run: |
          TAG="${{ steps.external_release.outputs.tag }}"
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git tag -a "$TAG" -m "Release $TAG - Synched with upstream repo"
          git push origin "$TAG"

      - name: Install build environment (same as Dockerfile)
        if: steps.check_release.outputs.exists == 'false'
        run: |
          sudo -i
          sudo apt-get update
          sudo apt-get install --yes apt-utils
          sudo DEBIAN_FRONTEND=noninteractive apt-get install --yes wget locales appstream build-essential cmake pkg-config

      - name: Executing AppImage build
        if: steps.check_release.outputs.exists == 'false'
        run: |
          GITHUB_REF_NAME="${{ steps.external_release.outputs.tag }}"
          bash ./make_appimage.sh

      - name: Create Release
        if: steps.check_release.outputs.exists == 'false'
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: True
          tag: ${{ steps.external_release.outputs.tag }}
          name: "Release build (${{ steps.external_release.outputs.tag }})"
          body: |
            ðŸ”„ Release synchronized with Gnucash repository.
            
            ---
            
            ${{ steps.external_release.outputs.body }}
          artifacts: "*.AppImage"
          token: ${{ secrets.GITHUB_TOKEN }}

      #- name: Create GitHub Release
      #  if: steps.check_release.outputs.exists == 'false'
      #  uses: actions/create-release@v1
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #  with:
      #    tag_name: ${{ steps.external_release.outputs.tag }}
      #    release_name: ${{ steps.external_release.outputs.name }}
      #    body: |
      #      ðŸ”„ Cette release est synchronisÃ©e avec le dÃ©pÃ´t externe.
      #      
      #      ---
      #      
      #      ${{ steps.external_release.outputs.body }}
      #    draft: false
      #    prerelease: false

      #- name: Notify if no new release
      #  if: steps.check_release.outputs.exists == 'true'
      #  run: |
      #    echo "Aucune nouvelle release Ã  synchroniser"




      #- name: Create Release
      #  uses: ncipollo/release-action@v1
      #  with:
      #    allowUpdates: True
      #    tag: ${{ github.ref_name }}
      #    name: "Release build (${{ github.ref_name }})"
      #    omitBody: True
      #    artifacts: "*.AppImage"
      #    token: ${{ secrets.GITHUB_TOKEN }}
